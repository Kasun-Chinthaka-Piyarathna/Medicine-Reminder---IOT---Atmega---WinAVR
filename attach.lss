
attach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  00001696  0000172a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008001e0  008001e0  000018aa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ac  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020b8  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000312  00000000  00000000  00003c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cad  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00005bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025a  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001255  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  0000728f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 09 	call	0x131a	; 0x131a <main>
      8a:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
      92:	67 2b       	or	r22, r23
      94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
      96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
      98:	00 97       	sbiw	r24, 0x00	; 0
      9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
      9c:	d8 98       	cbi	0x1b, 0	; 27
      9e:	08 95       	ret
		else if(a == eS_PORTA1)
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	91 05       	cpc	r25, r1
      a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
      a6:	d9 98       	cbi	0x1b, 1	; 27
      a8:	08 95       	ret
		else if(a == eS_PORTA2)
      aa:	82 30       	cpi	r24, 0x02	; 2
      ac:	91 05       	cpc	r25, r1
      ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
      b0:	da 98       	cbi	0x1b, 2	; 27
      b2:	08 95       	ret
		else if(a == eS_PORTA3)
      b4:	83 30       	cpi	r24, 0x03	; 3
      b6:	91 05       	cpc	r25, r1
      b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
      ba:	db 98       	cbi	0x1b, 3	; 27
      bc:	08 95       	ret
		else if(a == eS_PORTA4)
      be:	84 30       	cpi	r24, 0x04	; 4
      c0:	91 05       	cpc	r25, r1
      c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
      c4:	dc 98       	cbi	0x1b, 4	; 27
      c6:	08 95       	ret
		else if(a == eS_PORTA5)
      c8:	85 30       	cpi	r24, 0x05	; 5
      ca:	91 05       	cpc	r25, r1
      cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
      ce:	dd 98       	cbi	0x1b, 5	; 27
      d0:	08 95       	ret
		else if(a == eS_PORTA6)
      d2:	86 30       	cpi	r24, 0x06	; 6
      d4:	91 05       	cpc	r25, r1
      d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
      d8:	de 98       	cbi	0x1b, 6	; 27
      da:	08 95       	ret
		else if(a == eS_PORTA7)
      dc:	87 30       	cpi	r24, 0x07	; 7
      de:	91 05       	cpc	r25, r1
      e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
      e2:	df 98       	cbi	0x1b, 7	; 27
      e4:	08 95       	ret
		else if(a == eS_PORTB0)
      e6:	8a 30       	cpi	r24, 0x0A	; 10
      e8:	91 05       	cpc	r25, r1
      ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
      ec:	c0 98       	cbi	0x18, 0	; 24
      ee:	08 95       	ret
		else if(a == eS_PORTB1)
      f0:	8b 30       	cpi	r24, 0x0B	; 11
      f2:	91 05       	cpc	r25, r1
      f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
      f6:	c1 98       	cbi	0x18, 1	; 24
      f8:	08 95       	ret
		else if(a == eS_PORTB2)
      fa:	8c 30       	cpi	r24, 0x0C	; 12
      fc:	91 05       	cpc	r25, r1
      fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
     100:	c2 98       	cbi	0x18, 2	; 24
     102:	08 95       	ret
		else if(a == eS_PORTB3)
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	91 05       	cpc	r25, r1
     108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
     10a:	c3 98       	cbi	0x18, 3	; 24
     10c:	08 95       	ret
		else if(a == eS_PORTB4)
     10e:	8e 30       	cpi	r24, 0x0E	; 14
     110:	91 05       	cpc	r25, r1
     112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
     114:	c4 98       	cbi	0x18, 4	; 24
     116:	08 95       	ret
		else if(a == eS_PORTB5)
     118:	8f 30       	cpi	r24, 0x0F	; 15
     11a:	91 05       	cpc	r25, r1
     11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
     11e:	c5 98       	cbi	0x18, 5	; 24
     120:	08 95       	ret
		else if(a == eS_PORTB6)
     122:	80 31       	cpi	r24, 0x10	; 16
     124:	91 05       	cpc	r25, r1
     126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
     128:	c6 98       	cbi	0x18, 6	; 24
     12a:	08 95       	ret
		else if(a == eS_PORTB7)
     12c:	81 31       	cpi	r24, 0x11	; 17
     12e:	91 05       	cpc	r25, r1
     130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
     132:	c7 98       	cbi	0x18, 7	; 24
     134:	08 95       	ret
		else if(a == eS_PORTC0)
     136:	84 31       	cpi	r24, 0x14	; 20
     138:	91 05       	cpc	r25, r1
     13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
     13c:	a8 98       	cbi	0x15, 0	; 21
     13e:	08 95       	ret
		else if(a == eS_PORTC1)
     140:	85 31       	cpi	r24, 0x15	; 21
     142:	91 05       	cpc	r25, r1
     144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
     146:	a9 98       	cbi	0x15, 1	; 21
     148:	08 95       	ret
		else if(a == eS_PORTC2)
     14a:	86 31       	cpi	r24, 0x16	; 22
     14c:	91 05       	cpc	r25, r1
     14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
     150:	aa 98       	cbi	0x15, 2	; 21
     152:	08 95       	ret
		else if(a == eS_PORTC3)
     154:	87 31       	cpi	r24, 0x17	; 23
     156:	91 05       	cpc	r25, r1
     158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
     15a:	ab 98       	cbi	0x15, 3	; 21
     15c:	08 95       	ret
		else if(a == eS_PORTC4)
     15e:	88 31       	cpi	r24, 0x18	; 24
     160:	91 05       	cpc	r25, r1
     162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
     164:	ac 98       	cbi	0x15, 4	; 21
     166:	08 95       	ret
		else if(a == eS_PORTC5)
     168:	89 31       	cpi	r24, 0x19	; 25
     16a:	91 05       	cpc	r25, r1
     16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
     16e:	ad 98       	cbi	0x15, 5	; 21
     170:	08 95       	ret
                else if(a == eS_PORTC6)
     172:	8a 31       	cpi	r24, 0x1A	; 26
     174:	91 05       	cpc	r25, r1
     176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
                  PORTC &= ~(1<<PC6);		
     178:	ae 98       	cbi	0x15, 6	; 21
     17a:	08 95       	ret
		else if(a == eS_PORTC7)
     17c:	8b 31       	cpi	r24, 0x1B	; 27
     17e:	91 05       	cpc	r25, r1
     180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
     182:	af 98       	cbi	0x15, 7	; 21
     184:	08 95       	ret
		else if(a == eS_PORTD0)
     186:	8e 31       	cpi	r24, 0x1E	; 30
     188:	91 05       	cpc	r25, r1
     18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
     18c:	90 98       	cbi	0x12, 0	; 18
     18e:	08 95       	ret
		else if(a == eS_PORTD1)
     190:	8f 31       	cpi	r24, 0x1F	; 31
     192:	91 05       	cpc	r25, r1
     194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
     196:	91 98       	cbi	0x12, 1	; 18
     198:	08 95       	ret
		else if(a == eS_PORTD2)
     19a:	80 32       	cpi	r24, 0x20	; 32
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
     1a0:	92 98       	cbi	0x12, 2	; 18
     1a2:	08 95       	ret
		else if(a == eS_PORTD3)
     1a4:	81 32       	cpi	r24, 0x21	; 33
     1a6:	91 05       	cpc	r25, r1
     1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
     1aa:	93 98       	cbi	0x12, 3	; 18
     1ac:	08 95       	ret
		else if(a == eS_PORTD4)
     1ae:	82 32       	cpi	r24, 0x22	; 34
     1b0:	91 05       	cpc	r25, r1
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
     1b4:	94 98       	cbi	0x12, 4	; 18
     1b6:	08 95       	ret
		else if(a == eS_PORTD5)
     1b8:	83 32       	cpi	r24, 0x23	; 35
     1ba:	91 05       	cpc	r25, r1
     1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
     1be:	95 98       	cbi	0x12, 5	; 18
     1c0:	08 95       	ret
		else if(a == eS_PORTD6)
     1c2:	84 32       	cpi	r24, 0x24	; 36
     1c4:	91 05       	cpc	r25, r1
     1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
     1c8:	96 98       	cbi	0x12, 6	; 18
     1ca:	08 95       	ret
		else if(a == eS_PORTD7)
     1cc:	85 97       	sbiw	r24, 0x25	; 37
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
     1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
     1d2:	97 98       	cbi	0x12, 7	; 18
     1d4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
     1da:	d8 9a       	sbi	0x1b, 0	; 27
     1dc:	08 95       	ret
		else if(a == eS_PORTA1)
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	91 05       	cpc	r25, r1
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
     1e4:	d9 9a       	sbi	0x1b, 1	; 27
     1e6:	08 95       	ret
		else if(a == eS_PORTA2)
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	91 05       	cpc	r25, r1
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
     1ee:	da 9a       	sbi	0x1b, 2	; 27
     1f0:	08 95       	ret
		else if(a == eS_PORTA3)
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	91 05       	cpc	r25, r1
     1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
     1f8:	db 9a       	sbi	0x1b, 3	; 27
     1fa:	08 95       	ret
		else if(a == eS_PORTA4)
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	91 05       	cpc	r25, r1
     200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
     202:	dc 9a       	sbi	0x1b, 4	; 27
     204:	08 95       	ret
		else if(a == eS_PORTA5)
     206:	85 30       	cpi	r24, 0x05	; 5
     208:	91 05       	cpc	r25, r1
     20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
     20c:	dd 9a       	sbi	0x1b, 5	; 27
     20e:	08 95       	ret
		else if(a == eS_PORTA6)
     210:	86 30       	cpi	r24, 0x06	; 6
     212:	91 05       	cpc	r25, r1
     214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
     216:	de 9a       	sbi	0x1b, 6	; 27
     218:	08 95       	ret
		else if(a == eS_PORTA7)
     21a:	87 30       	cpi	r24, 0x07	; 7
     21c:	91 05       	cpc	r25, r1
     21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
     220:	df 9a       	sbi	0x1b, 7	; 27
     222:	08 95       	ret
		else if(a == eS_PORTB0)
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	91 05       	cpc	r25, r1
     228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
     22a:	c0 9a       	sbi	0x18, 0	; 24
     22c:	08 95       	ret
		else if(a == eS_PORTB1)
     22e:	8b 30       	cpi	r24, 0x0B	; 11
     230:	91 05       	cpc	r25, r1
     232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
     234:	c1 9a       	sbi	0x18, 1	; 24
     236:	08 95       	ret
		else if(a == eS_PORTB2)
     238:	8c 30       	cpi	r24, 0x0C	; 12
     23a:	91 05       	cpc	r25, r1
     23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
     23e:	c2 9a       	sbi	0x18, 2	; 24
     240:	08 95       	ret
		else if(a == eS_PORTB3)
     242:	8d 30       	cpi	r24, 0x0D	; 13
     244:	91 05       	cpc	r25, r1
     246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
     248:	c3 9a       	sbi	0x18, 3	; 24
     24a:	08 95       	ret
		else if(a == eS_PORTB4)
     24c:	8e 30       	cpi	r24, 0x0E	; 14
     24e:	91 05       	cpc	r25, r1
     250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
     252:	c4 9a       	sbi	0x18, 4	; 24
     254:	08 95       	ret
		else if(a == eS_PORTB5)
     256:	8f 30       	cpi	r24, 0x0F	; 15
     258:	91 05       	cpc	r25, r1
     25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
     25c:	c5 9a       	sbi	0x18, 5	; 24
     25e:	08 95       	ret
		else if(a == eS_PORTB6)
     260:	80 31       	cpi	r24, 0x10	; 16
     262:	91 05       	cpc	r25, r1
     264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
     266:	c6 9a       	sbi	0x18, 6	; 24
     268:	08 95       	ret
		else if(a == eS_PORTB7)
     26a:	81 31       	cpi	r24, 0x11	; 17
     26c:	91 05       	cpc	r25, r1
     26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
     270:	c7 9a       	sbi	0x18, 7	; 24
     272:	08 95       	ret
		else if(a == eS_PORTC0)
     274:	84 31       	cpi	r24, 0x14	; 20
     276:	91 05       	cpc	r25, r1
     278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
     27a:	a8 9a       	sbi	0x15, 0	; 21
     27c:	08 95       	ret
		else if(a == eS_PORTC1)
     27e:	85 31       	cpi	r24, 0x15	; 21
     280:	91 05       	cpc	r25, r1
     282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
     284:	a9 9a       	sbi	0x15, 1	; 21
     286:	08 95       	ret
		else if(a == eS_PORTC2)
     288:	86 31       	cpi	r24, 0x16	; 22
     28a:	91 05       	cpc	r25, r1
     28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
     28e:	aa 9a       	sbi	0x15, 2	; 21
     290:	08 95       	ret
		else if(a == eS_PORTC3)
     292:	87 31       	cpi	r24, 0x17	; 23
     294:	91 05       	cpc	r25, r1
     296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
     298:	ab 9a       	sbi	0x15, 3	; 21
     29a:	08 95       	ret
		else if(a == eS_PORTC4)
     29c:	88 31       	cpi	r24, 0x18	; 24
     29e:	91 05       	cpc	r25, r1
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
     2a2:	ac 9a       	sbi	0x15, 4	; 21
     2a4:	08 95       	ret
		else if(a == eS_PORTC5)
     2a6:	89 31       	cpi	r24, 0x19	; 25
     2a8:	91 05       	cpc	r25, r1
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
     2ac:	ad 9a       	sbi	0x15, 5	; 21
     2ae:	08 95       	ret
		else if(a == eS_PORTC6)
     2b0:	8a 31       	cpi	r24, 0x1A	; 26
     2b2:	91 05       	cpc	r25, r1
     2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
     2b6:	ae 9a       	sbi	0x15, 6	; 21
     2b8:	08 95       	ret
		else if(a == eS_PORTC7)
     2ba:	8b 31       	cpi	r24, 0x1B	; 27
     2bc:	91 05       	cpc	r25, r1
     2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
     2c0:	af 9a       	sbi	0x15, 7	; 21
     2c2:	08 95       	ret
		else if(a == eS_PORTD0)
     2c4:	8e 31       	cpi	r24, 0x1E	; 30
     2c6:	91 05       	cpc	r25, r1
     2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
     2ca:	90 9a       	sbi	0x12, 0	; 18
     2cc:	08 95       	ret
		else if(a == eS_PORTD1)
     2ce:	8f 31       	cpi	r24, 0x1F	; 31
     2d0:	91 05       	cpc	r25, r1
     2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
     2d4:	91 9a       	sbi	0x12, 1	; 18
     2d6:	08 95       	ret
		else if(a == eS_PORTD2)
     2d8:	80 32       	cpi	r24, 0x20	; 32
     2da:	91 05       	cpc	r25, r1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
     2de:	92 9a       	sbi	0x12, 2	; 18
     2e0:	08 95       	ret
		else if(a == eS_PORTD3)
     2e2:	81 32       	cpi	r24, 0x21	; 33
     2e4:	91 05       	cpc	r25, r1
     2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
     2e8:	93 9a       	sbi	0x12, 3	; 18
     2ea:	08 95       	ret
		else if(a == eS_PORTD4)
     2ec:	82 32       	cpi	r24, 0x22	; 34
     2ee:	91 05       	cpc	r25, r1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
     2f2:	94 9a       	sbi	0x12, 4	; 18
     2f4:	08 95       	ret
		else if(a == eS_PORTD5)
     2f6:	83 32       	cpi	r24, 0x23	; 35
     2f8:	91 05       	cpc	r25, r1
     2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
     2fc:	95 9a       	sbi	0x12, 5	; 18
     2fe:	08 95       	ret
		else if(a == eS_PORTD6)
     300:	84 32       	cpi	r24, 0x24	; 36
     302:	91 05       	cpc	r25, r1
     304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
     306:	96 9a       	sbi	0x12, 6	; 18
     308:	08 95       	ret
		else if(a == eS_PORTD7)
     30a:	85 97       	sbiw	r24, 0x25	; 37
     30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
     30e:	97 9a       	sbi	0x12, 7	; 18
     310:	08 95       	ret

00000312 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	08 2f       	mov	r16, r24
	if(a & 1)
     318:	18 2f       	mov	r17, r24
     31a:	80 ff       	sbrs	r24, 0
     31c:	05 c0       	rjmp	.+10     	; 0x328 <Lcd8_Port+0x16>
	pinChange(D0,1);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	04 c0       	rjmp	.+8      	; 0x330 <Lcd8_Port+0x1e>
	else
	pinChange(D0,0);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
     334:	11 ff       	sbrs	r17, 1
     336:	05 c0       	rjmp	.+10     	; 0x342 <Lcd8_Port+0x30>
	pinChange(D1,1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	04 c0       	rjmp	.+8      	; 0x34a <Lcd8_Port+0x38>
	else
	pinChange(D1,0);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
     34e:	12 ff       	sbrs	r17, 2
     350:	05 c0       	rjmp	.+10     	; 0x35c <Lcd8_Port+0x4a>
	pinChange(D2,1);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	04 c0       	rjmp	.+8      	; 0x364 <Lcd8_Port+0x52>
	else
	pinChange(D2,0);
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
     368:	13 ff       	sbrs	r17, 3
     36a:	05 c0       	rjmp	.+10     	; 0x376 <Lcd8_Port+0x64>
	pinChange(D3,1);
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	04 c0       	rjmp	.+8      	; 0x37e <Lcd8_Port+0x6c>
	else
	pinChange(D3,0);
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 16)
     382:	14 ff       	sbrs	r17, 4
     384:	05 c0       	rjmp	.+10     	; 0x390 <Lcd8_Port+0x7e>
	pinChange(D4,1);
     386:	82 e2       	ldi	r24, 0x22	; 34
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	04 c0       	rjmp	.+8      	; 0x398 <Lcd8_Port+0x86>
	else
	pinChange(D4,0);
     390:	82 e2       	ldi	r24, 0x22	; 34
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>

	if(a & 32)
     39c:	15 ff       	sbrs	r17, 5
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <Lcd8_Port+0x98>
	pinChange(D5,1);
     3a0:	83 e2       	ldi	r24, 0x23	; 35
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <Lcd8_Port+0xa0>
	else
	pinChange(D5,0);
     3aa:	83 e2       	ldi	r24, 0x23	; 35
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 64)
     3b6:	16 ff       	sbrs	r17, 6
     3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <Lcd8_Port+0xb2>
	pinChange(D6,1);
     3ba:	84 e2       	ldi	r24, 0x24	; 36
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <Lcd8_Port+0xba>
	else
	pinChange(D6,0);
     3c4:	84 e2       	ldi	r24, 0x24	; 36
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 128)
     3d0:	07 ff       	sbrs	r16, 7
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <Lcd8_Port+0xcc>
	pinChange(D7,1);
     3d4:	85 e2       	ldi	r24, 0x25	; 37
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <Lcd8_Port+0xd4>
	else
	pinChange(D7,0);
     3de:	85 e2       	ldi	r24, 0x25	; 37
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	08 95       	ret

000003f0 <Lcd8_Cmd>:

void Lcd8_Cmd(char a)
{
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd8_Port(a);             //Data transfer
     402:	81 2f       	mov	r24, r17
     404:	0e 94 89 01 	call	0x312	; 0x312 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
     408:	81 e2       	ldi	r24, 0x21	; 33
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     414:	0a ef       	ldi	r16, 0xFA	; 250
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	c8 01       	movw	r24, r16
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <Lcd8_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     41e:	81 e2       	ldi	r24, 0x21	; 33
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     42a:	c8 01       	movw	r24, r16
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <Lcd8_Cmd+0x3c>
	_delay_ms(1);
}
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     43c:	08 95       	ret

0000043e <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	29 f4       	brne	.+10     	; 0x44c <Lcd8_Set_Cursor+0xe>
	Lcd8_Cmd(0x80 + b);
     442:	86 2f       	mov	r24, r22
     444:	80 58       	subi	r24, 0x80	; 128
     446:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     44a:	08 95       	ret
	else if(a == 2)
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	21 f4       	brne	.+8      	; 0x458 <Lcd8_Set_Cursor+0x1a>
	Lcd8_Cmd(0xC0 + b);
     450:	86 2f       	mov	r24, r22
     452:	80 54       	subi	r24, 0x40	; 64
     454:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     458:	08 95       	ret

0000045a <Lcd8_Init>:
}

void Lcd8_Init()
{
	pinChange(RS,0);
     45a:	80 e2       	ldi	r24, 0x20	; 32
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	pinChange(EN,0);
     466:	81 e2       	ldi	r24, 0x21	; 33
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     472:	88 e8       	ldi	r24, 0x88	; 136
     474:	93 e1       	ldi	r25, 0x13	; 19
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <Lcd8_Init+0x1c>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
     47a:	80 e3       	ldi	r24, 0x30	; 48
     47c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     480:	82 ee       	ldi	r24, 0xE2	; 226
     482:	94 e0       	ldi	r25, 0x04	; 4
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <Lcd8_Init+0x2a>
	_delay_ms(5);
	Lcd8_Cmd(0x30);
     488:	80 e3       	ldi	r24, 0x30	; 48
     48a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     48e:	8a ef       	ldi	r24, 0xFA	; 250
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <Lcd8_Init+0x38>
	_delay_ms(1);
	Lcd8_Cmd(0x30);
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     49c:	84 ec       	ldi	r24, 0xC4	; 196
     49e:	99 e0       	ldi	r25, 0x09	; 9
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <Lcd8_Init+0x46>
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
     4a4:	88 e3       	ldi	r24, 0x38	; 56
     4a6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
     4aa:	8c e0       	ldi	r24, 0x0C	; 12
     4ac:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
     4b6:	86 e0       	ldi	r24, 0x06	; 6
     4b8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     4bc:	08 95       	ret

000004be <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	18 2f       	mov	r17, r24
	pinChange(RS,1);             // => RS = 1
     4c4:	80 e2       	ldi	r24, 0x20	; 32
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd8_Port(a);             //Data transfer
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 89 01 	call	0x312	; 0x312 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
     4d6:	81 e2       	ldi	r24, 0x21	; 33
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4e2:	0a ef       	ldi	r16, 0xFA	; 250
     4e4:	10 e0       	ldi	r17, 0x00	; 0
     4e6:	c8 01       	movw	r24, r16
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <Lcd8_Write_Char+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
     4ec:	81 e2       	ldi	r24, 0x21	; 33
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4f8:	c8 01       	movw	r24, r16
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <Lcd8_Write_Char+0x3c>
	_delay_ms(1);
}
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	02 c0       	rjmp	.+4      	; 0x510 <Lcd8_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
     50c:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     510:	89 91       	ld	r24, Y+
     512:	88 23       	and	r24, r24
     514:	d9 f7       	brne	.-10     	; 0x50c <Lcd8_Write_String+0x8>
	Lcd8_Write_Char(a[i]);
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
     51c:	8c e1       	ldi	r24, 0x1C	; 28
     51e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     522:	08 95       	ret

00000524 <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
     524:	88 e1       	ldi	r24, 0x18	; 24
     526:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     52a:	08 95       	ret

0000052c <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
	if(a & 1)
     530:	c8 2f       	mov	r28, r24
     532:	80 ff       	sbrs	r24, 0
     534:	05 c0       	rjmp	.+10     	; 0x540 <Lcd4_Port+0x14>
	pinChange(D4,1);
     536:	82 e2       	ldi	r24, 0x22	; 34
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	04 c0       	rjmp	.+8      	; 0x548 <Lcd4_Port+0x1c>
	else
	pinChange(D4,0);
     540:	82 e2       	ldi	r24, 0x22	; 34
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
     54c:	c1 ff       	sbrs	r28, 1
     54e:	05 c0       	rjmp	.+10     	; 0x55a <Lcd4_Port+0x2e>
	pinChange(D5,1);
     550:	83 e2       	ldi	r24, 0x23	; 35
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	04 c0       	rjmp	.+8      	; 0x562 <Lcd4_Port+0x36>
	else
	pinChange(D5,0);
     55a:	83 e2       	ldi	r24, 0x23	; 35
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
     566:	c2 ff       	sbrs	r28, 2
     568:	05 c0       	rjmp	.+10     	; 0x574 <Lcd4_Port+0x48>
	pinChange(D6,1);
     56a:	84 e2       	ldi	r24, 0x24	; 36
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	04 c0       	rjmp	.+8      	; 0x57c <Lcd4_Port+0x50>
	else
	pinChange(D6,0);
     574:	84 e2       	ldi	r24, 0x24	; 36
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
     580:	c3 ff       	sbrs	r28, 3
     582:	05 c0       	rjmp	.+10     	; 0x58e <Lcd4_Port+0x62>
	pinChange(D7,1);
     584:	85 e2       	ldi	r24, 0x25	; 37
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	04 c0       	rjmp	.+8      	; 0x596 <Lcd4_Port+0x6a>
	else
	pinChange(D7,0);
     58e:	85 e2       	ldi	r24, 0x25	; 37
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
     5a6:	80 e2       	ldi	r24, 0x20	; 32
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
     5b2:	81 2f       	mov	r24, r17
     5b4:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     5b8:	81 e2       	ldi	r24, 0x21	; 33
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     5c4:	0a ef       	ldi	r16, 0xFA	; 250
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	c8 01       	movw	r24, r16
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <Lcd4_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     5ce:	81 e2       	ldi	r24, 0x21	; 33
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     5da:	c8 01       	movw	r24, r16
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <Lcd4_Cmd+0x3c>
	_delay_ms(1);
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     5f2:	08 95       	ret

000005f4 <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
     5f4:	1f 93       	push	r17
	char temp,z,y;
	if(a == 1)
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	19 f4       	brne	.+6      	; 0x600 <Lcd4_Set_Cursor+0xc>
	{
		temp = 0x80 + b;
     5fa:	16 2f       	mov	r17, r22
     5fc:	10 58       	subi	r17, 0x80	; 128
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <Lcd4_Set_Cursor+0x14>
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
	else if(a == 2)
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	59 f4       	brne	.+22     	; 0x61a <Lcd4_Set_Cursor+0x26>
	{
		temp = 0xC0 + b;
     604:	16 2f       	mov	r17, r22
     606:	10 54       	subi	r17, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     608:	81 2f       	mov	r24, r17
     60a:	82 95       	swap	r24
     60c:	8f 70       	andi	r24, 0x0F	; 15
     60e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     612:	81 2f       	mov	r24, r17
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	}
}
     61a:	1f 91       	pop	r17
     61c:	08 95       	ret

0000061e <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
     624:	88 e8       	ldi	r24, 0x88	; 136
     626:	93 e1       	ldi	r25, 0x13	; 19
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <Lcd4_Init+0xa>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
     632:	82 ee       	ldi	r24, 0xE2	; 226
     634:	94 e0       	ldi	r25, 0x04	; 4
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <Lcd4_Init+0x18>
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
     640:	8e eb       	ldi	r24, 0xBE	; 190
     642:	9a e0       	ldi	r25, 0x0A	; 10
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <Lcd4_Init+0x26>
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     666:	8c e0       	ldi	r24, 0x0C	; 12
     668:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     678:	08 95       	ret

0000067a <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	f8 2e       	mov	r15, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     682:	80 e2       	ldi	r24, 0x20	; 32
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     68e:	8f 2d       	mov	r24, r15
     690:	82 95       	swap	r24
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
	pinChange(EN,1);
     698:	81 e2       	ldi	r24, 0x21	; 33
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6a4:	0a ef       	ldi	r16, 0xFA	; 250
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	c8 01       	movw	r24, r16
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <Lcd4_Write_Char+0x30>
	_delay_ms(1);
	pinChange(EN,0);
     6ae:	81 e2       	ldi	r24, 0x21	; 33
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6ba:	c8 01       	movw	r24, r16
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <Lcd4_Write_Char+0x42>
	_delay_ms(1);
	Lcd4_Port(temp);
     6c0:	8f 2d       	mov	r24, r15
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
	pinChange(EN,1);
     6c8:	81 e2       	ldi	r24, 0x21	; 33
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6d4:	c8 01       	movw	r24, r16
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <Lcd4_Write_Char+0x5c>
	_delay_ms(1);
	pinChange(EN,0);
     6da:	81 e2       	ldi	r24, 0x21	; 33
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6e6:	c8 01       	movw	r24, r16
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <Lcd4_Write_Char+0x6e>
	_delay_ms(1);
}
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	08 95       	ret

000006f4 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	ec 01       	movw	r28, r24
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <Lcd4_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
     6fc:	0e 94 3d 03 	call	0x67a	; 0x67a <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     700:	89 91       	ld	r24, Y+
     702:	88 23       	and	r24, r24
     704:	d9 f7       	brne	.-10     	; 0x6fc <Lcd4_Write_String+0x8>
	Lcd4_Write_Char(a[i]);
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     718:	08 95       	ret

0000071a <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     726:	08 95       	ret

00000728 <keypad>:
	
 }	

}

void keypad(void){
     728:	2f 92       	push	r2
     72a:	3f 92       	push	r3
     72c:	4f 92       	push	r4
     72e:	5f 92       	push	r5
     730:	6f 92       	push	r6
     732:	7f 92       	push	r7
     734:	8f 92       	push	r8
     736:	9f 92       	push	r9
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	08 e8       	ldi	r16, 0x88	; 136
     74e:	13 e1       	ldi	r17, 0x13	; 19
		{
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("3");
			_delay_ms(180);
			place++;
			num[x]=3;
     750:	c8 ec       	ldi	r28, 0xC8	; 200
     752:	df ea       	ldi	r29, 0xAF	; 175
     754:	a3 e0       	ldi	r26, 0x03	; 3
     756:	4a 2e       	mov	r4, r26
     758:	51 2c       	mov	r5, r1
		{
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("4");
			_delay_ms(180);
			place++;
			num[x]=4;
     75a:	f4 e0       	ldi	r31, 0x04	; 4
     75c:	2f 2e       	mov	r2, r31
     75e:	31 2c       	mov	r3, r1
		if(bit_is_set (PINB,5)){
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("5");
			_delay_ms(180);
			place++;
			num[x]=5;
     760:	e5 e0       	ldi	r30, 0x05	; 5
     762:	8e 2e       	mov	r8, r30
     764:	91 2c       	mov	r9, r1
		if(bit_is_set(PINB,6)){
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("6");
			_delay_ms(180);
			place++;
			num[x]=6;
     766:	76 e0       	ldi	r23, 0x06	; 6
     768:	67 2e       	mov	r6, r23
     76a:	71 2c       	mov	r7, r1
		{
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("7");
			_delay_ms(180);
			place++;
			num[x]=7;
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	c6 2e       	mov	r12, r22
     770:	d1 2c       	mov	r13, r1
		{
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("8");
			_delay_ms(180);
			place++;
			num[x]=8;
     772:	58 e0       	ldi	r21, 0x08	; 8
     774:	a5 2e       	mov	r10, r21
     776:	b1 2c       	mov	r11, r1
		if(bit_is_set(PINB,6)){
			Lcd4_Set_Cursor(raw,place);
			Lcd4_Write_String("9");
			_delay_ms(180);
			place++;
			num[x]=9;
     778:	49 e0       	ldi	r20, 0x09	; 9
     77a:	e4 2e       	mov	r14, r20
     77c:	f1 2c       	mov	r15, r1
}

void keypad(void){
	do{
		
		if(x<=1){
     77e:	80 91 e3 01 	lds	r24, 0x01E3
     782:	90 91 e4 01 	lds	r25, 0x01E4
     786:	02 97       	sbiw	r24, 0x02	; 2
     788:	0c f0       	brlt	.+2      	; 0x78c <keypad+0x64>
     78a:	b9 c1       	rjmp	.+882    	; 0xafe <__stack+0x29f>
			Lcd4_Set_Cursor(raw,place);
     78c:	80 91 dc 01 	lds	r24, 0x01DC
     790:	60 91 da 01 	lds	r22, 0x01DA
     794:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("_");
     798:	80 e6       	ldi	r24, 0x60	; 96
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
		else{
			
			break;
		}
		
		PORTB|=1<<PINB0;
     7a0:	c0 9a       	sbi	0x18, 0	; 24
     7a2:	c8 01       	movw	r24, r16
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <keypad+0x7c>
		_delay_ms(20);

		if(bit_is_set(PINB,4))
     7a8:	b4 9b       	sbis	0x16, 4	; 22
     7aa:	28 c0       	rjmp	.+80     	; 0x7fc <keypad+0xd4>
		{
			Lcd4_Set_Cursor(raw,place);
     7ac:	80 91 dc 01 	lds	r24, 0x01DC
     7b0:	60 91 da 01 	lds	r22, 0x01DA
     7b4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("1");
     7b8:	82 e6       	ldi	r24, 0x62	; 98
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <keypad+0x9a>
			_delay_ms(180);
			place++;
     7c6:	80 91 da 01 	lds	r24, 0x01DA
     7ca:	90 91 db 01 	lds	r25, 0x01DB
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	90 93 db 01 	sts	0x01DB, r25
     7d4:	80 93 da 01 	sts	0x01DA, r24
			num[x]=1;
     7d8:	80 91 e3 01 	lds	r24, 0x01E3
     7dc:	90 91 e4 01 	lds	r25, 0x01E4
     7e0:	fc 01       	movw	r30, r24
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ef 5f       	subi	r30, 0xFF	; 255
     7e8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	31 83       	std	Z+1, r19	; 0x01
     7f0:	20 83       	st	Z, r18
			++x;
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	90 93 e4 01 	sts	0x01E4, r25
     7f8:	80 93 e3 01 	sts	0x01E3, r24
		}

		if(bit_is_set (PINB,5))
     7fc:	b5 9b       	sbis	0x16, 5	; 22
     7fe:	28 c0       	rjmp	.+80     	; 0x850 <keypad+0x128>
		{
			Lcd4_Set_Cursor(raw,place);
     800:	80 91 dc 01 	lds	r24, 0x01DC
     804:	60 91 da 01 	lds	r22, 0x01DA
     808:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("2");
     80c:	84 e6       	ldi	r24, 0x64	; 100
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     814:	ce 01       	movw	r24, r28
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <keypad+0xee>
			_delay_ms(180);
			place++;
     81a:	80 91 da 01 	lds	r24, 0x01DA
     81e:	90 91 db 01 	lds	r25, 0x01DB
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	90 93 db 01 	sts	0x01DB, r25
     828:	80 93 da 01 	sts	0x01DA, r24
			num[x]=2;
     82c:	80 91 e3 01 	lds	r24, 0x01E3
     830:	90 91 e4 01 	lds	r25, 0x01E4
     834:	fc 01       	movw	r30, r24
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ef 5f       	subi	r30, 0xFF	; 255
     83c:	fd 4f       	sbci	r31, 0xFD	; 253
     83e:	22 e0       	ldi	r18, 0x02	; 2
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	31 83       	std	Z+1, r19	; 0x01
     844:	20 83       	st	Z, r18
			++x;
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	90 93 e4 01 	sts	0x01E4, r25
     84c:	80 93 e3 01 	sts	0x01E3, r24
		}

		if(bit_is_set (PINB,6))
     850:	b6 9b       	sbis	0x16, 6	; 22
     852:	26 c0       	rjmp	.+76     	; 0x8a0 <__stack+0x41>
		{
			Lcd4_Set_Cursor(raw,place);
     854:	80 91 dc 01 	lds	r24, 0x01DC
     858:	60 91 da 01 	lds	r22, 0x01DA
     85c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("3");
     860:	86 e6       	ldi	r24, 0x66	; 102
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     868:	ce 01       	movw	r24, r28
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
			_delay_ms(180);
			place++;
     86e:	80 91 da 01 	lds	r24, 0x01DA
     872:	90 91 db 01 	lds	r25, 0x01DB
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	90 93 db 01 	sts	0x01DB, r25
     87c:	80 93 da 01 	sts	0x01DA, r24
			num[x]=3;
     880:	80 91 e3 01 	lds	r24, 0x01E3
     884:	90 91 e4 01 	lds	r25, 0x01E4
     888:	fc 01       	movw	r30, r24
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ef 5f       	subi	r30, 0xFF	; 255
     890:	fd 4f       	sbci	r31, 0xFD	; 253
     892:	51 82       	std	Z+1, r5	; 0x01
     894:	40 82       	st	Z, r4
			++x;
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	90 93 e4 01 	sts	0x01E4, r25
     89c:	80 93 e3 01 	sts	0x01E3, r24
		}

		PORTB&=~(1<<PINB0);
     8a0:	c0 98       	cbi	0x18, 0	; 24
		PORTB|=(1<<PINB1);
     8a2:	c1 9a       	sbi	0x18, 1	; 24
     8a4:	c8 01       	movw	r24, r16
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <__stack+0x47>
		_delay_ms(20);

		if(bit_is_set(PINB,4))
     8aa:	b4 9b       	sbis	0x16, 4	; 22
     8ac:	26 c0       	rjmp	.+76     	; 0x8fa <__stack+0x9b>
		{
			Lcd4_Set_Cursor(raw,place);
     8ae:	80 91 dc 01 	lds	r24, 0x01DC
     8b2:	60 91 da 01 	lds	r22, 0x01DA
     8b6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("4");
     8ba:	88 e6       	ldi	r24, 0x68	; 104
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <__stack+0x65>
			_delay_ms(180);
			place++;
     8c8:	80 91 da 01 	lds	r24, 0x01DA
     8cc:	90 91 db 01 	lds	r25, 0x01DB
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	90 93 db 01 	sts	0x01DB, r25
     8d6:	80 93 da 01 	sts	0x01DA, r24
			num[x]=4;
     8da:	80 91 e3 01 	lds	r24, 0x01E3
     8de:	90 91 e4 01 	lds	r25, 0x01E4
     8e2:	fc 01       	movw	r30, r24
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	ef 5f       	subi	r30, 0xFF	; 255
     8ea:	fd 4f       	sbci	r31, 0xFD	; 253
     8ec:	31 82       	std	Z+1, r3	; 0x01
     8ee:	20 82       	st	Z, r2
			++x;
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	90 93 e4 01 	sts	0x01E4, r25
     8f6:	80 93 e3 01 	sts	0x01E3, r24
		}

		if(bit_is_set (PINB,5)){
     8fa:	b5 9b       	sbis	0x16, 5	; 22
     8fc:	26 c0       	rjmp	.+76     	; 0x94a <__stack+0xeb>
			Lcd4_Set_Cursor(raw,place);
     8fe:	80 91 dc 01 	lds	r24, 0x01DC
     902:	60 91 da 01 	lds	r22, 0x01DA
     906:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("5");
     90a:	8a e6       	ldi	r24, 0x6A	; 106
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     912:	ce 01       	movw	r24, r28
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0xb5>
			_delay_ms(180);
			place++;
     918:	80 91 da 01 	lds	r24, 0x01DA
     91c:	90 91 db 01 	lds	r25, 0x01DB
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	90 93 db 01 	sts	0x01DB, r25
     926:	80 93 da 01 	sts	0x01DA, r24
			num[x]=5;
     92a:	80 91 e3 01 	lds	r24, 0x01E3
     92e:	90 91 e4 01 	lds	r25, 0x01E4
     932:	fc 01       	movw	r30, r24
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ef 5f       	subi	r30, 0xFF	; 255
     93a:	fd 4f       	sbci	r31, 0xFD	; 253
     93c:	91 82       	std	Z+1, r9	; 0x01
     93e:	80 82       	st	Z, r8
			++x;
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	90 93 e4 01 	sts	0x01E4, r25
     946:	80 93 e3 01 	sts	0x01E3, r24
		}

		if(bit_is_set(PINB,6)){
     94a:	b6 9b       	sbis	0x16, 6	; 22
     94c:	26 c0       	rjmp	.+76     	; 0x99a <__stack+0x13b>
			Lcd4_Set_Cursor(raw,place);
     94e:	80 91 dc 01 	lds	r24, 0x01DC
     952:	60 91 da 01 	lds	r22, 0x01DA
     956:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("6");
     95a:	8c e6       	ldi	r24, 0x6C	; 108
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     962:	ce 01       	movw	r24, r28
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <__stack+0x105>
			_delay_ms(180);
			place++;
     968:	80 91 da 01 	lds	r24, 0x01DA
     96c:	90 91 db 01 	lds	r25, 0x01DB
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	90 93 db 01 	sts	0x01DB, r25
     976:	80 93 da 01 	sts	0x01DA, r24
			num[x]=6;
     97a:	80 91 e3 01 	lds	r24, 0x01E3
     97e:	90 91 e4 01 	lds	r25, 0x01E4
     982:	fc 01       	movw	r30, r24
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ef 5f       	subi	r30, 0xFF	; 255
     98a:	fd 4f       	sbci	r31, 0xFD	; 253
     98c:	71 82       	std	Z+1, r7	; 0x01
     98e:	60 82       	st	Z, r6
			++x;
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	90 93 e4 01 	sts	0x01E4, r25
     996:	80 93 e3 01 	sts	0x01E3, r24
		}

		PORTB&=~(1<<PINB1);
     99a:	c1 98       	cbi	0x18, 1	; 24
		PORTB|=(1<<PINB2);
     99c:	c2 9a       	sbi	0x18, 2	; 24
     99e:	c8 01       	movw	r24, r16
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <__stack+0x141>
		_delay_ms(20);

		if(bit_is_set(PINB,4))
     9a4:	b4 9b       	sbis	0x16, 4	; 22
     9a6:	26 c0       	rjmp	.+76     	; 0x9f4 <__stack+0x195>
		{
			Lcd4_Set_Cursor(raw,place);
     9a8:	80 91 dc 01 	lds	r24, 0x01DC
     9ac:	60 91 da 01 	lds	r22, 0x01DA
     9b0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("7");
     9b4:	8e e6       	ldi	r24, 0x6E	; 110
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     9bc:	ce 01       	movw	r24, r28
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <__stack+0x15f>
			_delay_ms(180);
			place++;
     9c2:	80 91 da 01 	lds	r24, 0x01DA
     9c6:	90 91 db 01 	lds	r25, 0x01DB
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	90 93 db 01 	sts	0x01DB, r25
     9d0:	80 93 da 01 	sts	0x01DA, r24
			num[x]=7;
     9d4:	80 91 e3 01 	lds	r24, 0x01E3
     9d8:	90 91 e4 01 	lds	r25, 0x01E4
     9dc:	fc 01       	movw	r30, r24
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ef 5f       	subi	r30, 0xFF	; 255
     9e4:	fd 4f       	sbci	r31, 0xFD	; 253
     9e6:	d1 82       	std	Z+1, r13	; 0x01
     9e8:	c0 82       	st	Z, r12
			++x;
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	90 93 e4 01 	sts	0x01E4, r25
     9f0:	80 93 e3 01 	sts	0x01E3, r24
		}

		if(bit_is_set (PINB,5))
     9f4:	b5 9b       	sbis	0x16, 5	; 22
     9f6:	26 c0       	rjmp	.+76     	; 0xa44 <__stack+0x1e5>
		{
			Lcd4_Set_Cursor(raw,place);
     9f8:	80 91 dc 01 	lds	r24, 0x01DC
     9fc:	60 91 da 01 	lds	r22, 0x01DA
     a00:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("8");
     a04:	80 e7       	ldi	r24, 0x70	; 112
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <__stack+0x1af>
			_delay_ms(180);
			place++;
     a12:	80 91 da 01 	lds	r24, 0x01DA
     a16:	90 91 db 01 	lds	r25, 0x01DB
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	90 93 db 01 	sts	0x01DB, r25
     a20:	80 93 da 01 	sts	0x01DA, r24
			num[x]=8;
     a24:	80 91 e3 01 	lds	r24, 0x01E3
     a28:	90 91 e4 01 	lds	r25, 0x01E4
     a2c:	fc 01       	movw	r30, r24
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	ef 5f       	subi	r30, 0xFF	; 255
     a34:	fd 4f       	sbci	r31, 0xFD	; 253
     a36:	b1 82       	std	Z+1, r11	; 0x01
     a38:	a0 82       	st	Z, r10
			++x;
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	90 93 e4 01 	sts	0x01E4, r25
     a40:	80 93 e3 01 	sts	0x01E3, r24
		}

		if(bit_is_set(PINB,6)){
     a44:	b6 9b       	sbis	0x16, 6	; 22
     a46:	26 c0       	rjmp	.+76     	; 0xa94 <__stack+0x235>
			Lcd4_Set_Cursor(raw,place);
     a48:	80 91 dc 01 	lds	r24, 0x01DC
     a4c:	60 91 da 01 	lds	r22, 0x01DA
     a50:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("9");
     a54:	82 e7       	ldi	r24, 0x72	; 114
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <__stack+0x1ff>
			_delay_ms(180);
			place++;
     a62:	80 91 da 01 	lds	r24, 0x01DA
     a66:	90 91 db 01 	lds	r25, 0x01DB
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	90 93 db 01 	sts	0x01DB, r25
     a70:	80 93 da 01 	sts	0x01DA, r24
			num[x]=9;
     a74:	80 91 e3 01 	lds	r24, 0x01E3
     a78:	90 91 e4 01 	lds	r25, 0x01E4
     a7c:	fc 01       	movw	r30, r24
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ef 5f       	subi	r30, 0xFF	; 255
     a84:	fd 4f       	sbci	r31, 0xFD	; 253
     a86:	f1 82       	std	Z+1, r15	; 0x01
     a88:	e0 82       	st	Z, r14
			++x;
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	90 93 e4 01 	sts	0x01E4, r25
     a90:	80 93 e3 01 	sts	0x01E3, r24
		}

		PORTB&=~(1<<PINB2);
     a94:	c2 98       	cbi	0x18, 2	; 24
		PORTB|=(1<<PINB3);
     a96:	c3 9a       	sbi	0x18, 3	; 24
     a98:	c8 01       	movw	r24, r16
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <__stack+0x23b>
		_delay_ms(20);

		if(bit_is_set (PINB,5)){
     a9e:	b5 9b       	sbis	0x16, 5	; 22
     aa0:	26 c0       	rjmp	.+76     	; 0xaee <__stack+0x28f>
			Lcd4_Set_Cursor(raw,place);
     aa2:	80 91 dc 01 	lds	r24, 0x01DC
     aa6:	60 91 da 01 	lds	r22, 0x01DA
     aaa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("0");
     aae:	84 e7       	ldi	r24, 0x74	; 116
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <__stack+0x259>
			_delay_ms(180);
			place++;
     abc:	80 91 da 01 	lds	r24, 0x01DA
     ac0:	90 91 db 01 	lds	r25, 0x01DB
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	90 93 db 01 	sts	0x01DB, r25
     aca:	80 93 da 01 	sts	0x01DA, r24
			num[x]=0;
     ace:	80 91 e3 01 	lds	r24, 0x01E3
     ad2:	90 91 e4 01 	lds	r25, 0x01E4
     ad6:	fc 01       	movw	r30, r24
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	ef 5f       	subi	r30, 0xFF	; 255
     ade:	fd 4f       	sbci	r31, 0xFD	; 253
     ae0:	11 82       	std	Z+1, r1	; 0x01
     ae2:	10 82       	st	Z, r1
			++x;
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	90 93 e4 01 	sts	0x01E4, r25
     aea:	80 93 e3 01 	sts	0x01E3, r24
		}

		PORTB&=~(1<<PINB3);
     aee:	c3 98       	cbi	0x18, 3	; 24
		
		
		
	}
	while(stop==1);
     af0:	80 91 de 01 	lds	r24, 0x01DE
     af4:	90 91 df 01 	lds	r25, 0x01DF
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	09 f4       	brne	.+2      	; 0xafe <__stack+0x29f>
     afc:	40 ce       	rjmp	.-896    	; 0x77e <keypad+0x56>
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	3f 90       	pop	r3
     b20:	2f 90       	pop	r2
     b22:	08 95       	ret

00000b24 <get_value>:

void get_value(){
	int n1,n2;
	n1=num[0];
     b24:	20 91 01 02 	lds	r18, 0x0201
     b28:	30 91 02 02 	lds	r19, 0x0202
	n2=num[1];
     b2c:	40 91 03 02 	lds	r20, 0x0203
     b30:	50 91 04 02 	lds	r21, 0x0204
	if(x==1)
     b34:	80 91 e3 01 	lds	r24, 0x01E3
     b38:	90 91 e4 01 	lds	r25, 0x01E4
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	31 f4       	brne	.+12     	; 0xb4c <get_value+0x28>
	*new_num=n1;
     b40:	e0 91 ff 01 	lds	r30, 0x01FF
     b44:	f0 91 00 02 	lds	r31, 0x0200
     b48:	20 83       	st	Z, r18
     b4a:	31 83       	std	Z+1, r19	; 0x01
	if(x==2)
     b4c:	80 91 e3 01 	lds	r24, 0x01E3
     b50:	90 91 e4 01 	lds	r25, 0x01E4
     b54:	02 97       	sbiw	r24, 0x02	; 2
     b56:	91 f4       	brne	.+36     	; 0xb7c <get_value+0x58>
	*new_num=(n1*10)+n2;
     b58:	e0 91 ff 01 	lds	r30, 0x01FF
     b5c:	f0 91 00 02 	lds	r31, 0x0200
     b60:	c9 01       	movw	r24, r18
     b62:	63 e0       	ldi	r22, 0x03	; 3
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	6a 95       	dec	r22
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <get_value+0x40>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	28 0f       	add	r18, r24
     b72:	39 1f       	adc	r19, r25
     b74:	24 0f       	add	r18, r20
     b76:	35 1f       	adc	r19, r21
     b78:	31 83       	std	Z+1, r19	; 0x01
     b7a:	20 83       	st	Z, r18
    x=0;
     b7c:	10 92 e4 01 	sts	0x01E4, r1
     b80:	10 92 e3 01 	sts	0x01E3, r1
	raw=2;
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 dd 01 	sts	0x01DD, r25
     b8c:	80 93 dc 01 	sts	0x01DC, r24
	place=2;
     b90:	90 93 db 01 	sts	0x01DB, r25
     b94:	80 93 da 01 	sts	0x01DA, r24
}
     b98:	08 95       	ret

00000b9a <uart_init>:
				
	  
}  
void uart_init (void)
{
	UBRRH = (BAUDRATE>>8);                      // shift the register right by 8 bits
     b9a:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUDRATE;                           // set baud rate
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	89 b9       	out	0x09, r24	; 9
	UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
     ba0:	8a b1       	in	r24, 0x0a	; 10
     ba2:	88 61       	ori	r24, 0x18	; 24
     ba4:	8a b9       	out	0x0a, r24	; 10
	UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
     ba6:	80 b5       	in	r24, 0x20	; 32
     ba8:	86 68       	ori	r24, 0x86	; 134
     baa:	80 bd       	out	0x20, r24	; 32
}
     bac:	08 95       	ret

00000bae <uart_transmit_char>:
void uart_transmit_char (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
     bae:	5d 9b       	sbis	0x0b, 5	; 11
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <uart_transmit_char>
	UDR = data;                                   // load data in the register
     bb2:	8c b9       	out	0x0c, r24	; 12
}
     bb4:	08 95       	ret

00000bb6 <uart_transmit_string>:
void uart_transmit_string (const unsigned char* st)
{
     bb6:	fc 01       	movw	r30, r24
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <uart_transmit_string+0xc>
	UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
	UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
}
void uart_transmit_char (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
     bba:	5d 9b       	sbis	0x0b, 5	; 11
     bbc:	fe cf       	rjmp	.-4      	; 0xbba <uart_transmit_string+0x4>
void uart_transmit_string (const unsigned char* st)
{
	
	
		while(*st)
		uart_transmit_char(*st++);
     bbe:	31 96       	adiw	r30, 0x01	; 1
	UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
}
void uart_transmit_char (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
	UDR = data;                                   // load data in the register
     bc0:	8c b9       	out	0x0c, r24	; 12
}
void uart_transmit_string (const unsigned char* st)
{
	
	
		while(*st)
     bc2:	80 81       	ld	r24, Z
     bc4:	88 23       	and	r24, r24
     bc6:	c9 f7       	brne	.-14     	; 0xbba <uart_transmit_string+0x4>
		uart_transmit_char(*st++);
	                         // load data in the register
}
     bc8:	08 95       	ret

00000bca <rxvalue>:
 
 unsigned char rxvalue(void){
	 while(!(UCSRA&(1<<RXC)));
     bca:	5f 9b       	sbis	0x0b, 7	; 11
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <rxvalue>
	 {
		 rxdata=UDR;
     bce:	8c b1       	in	r24, 0x0c	; 12
     bd0:	80 93 fc 01 	sts	0x01FC, r24
		 return rxdata;
	}
 }
     bd4:	08 95       	ret

00000bd6 <sendMSG>:

void sendMSG(){



	 Lcd4_Clear();
     bd6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Set_Cursor(1,1);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	 Lcd4_Write_String("Sending MSG");
     be2:	86 e7       	ldi	r24, 0x76	; 118
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     bea:	80 e1       	ldi	r24, 0x10	; 16
     bec:	97 e2       	ldi	r25, 0x27	; 39
     bee:	29 e1       	ldi	r18, 0x19	; 25
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	f9 01       	movw	r30, r18
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <sendMSG+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfa:	d9 f7       	brne	.-10     	; 0xbf2 <sendMSG+0x1c>
	 _delay_ms(1000);
	 Lcd4_Clear();
     bfc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Write_String("Setting UART....");
     c00:	82 e8       	ldi	r24, 0x82	; 130
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	 uart_init();
     c08:	0e 94 cd 05 	call	0xb9a	; 0xb9a <uart_init>
	 uart_transmit_string("AT+CMGF=1");
     c0c:	83 e9       	ldi	r24, 0x93	; 147
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uart_transmit_string>
	UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
	UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
}
void uart_transmit_char (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
     c14:	5d 9b       	sbis	0x0b, 5	; 11
     c16:	fe cf       	rjmp	.-4      	; 0xc14 <sendMSG+0x3e>
	UDR = data;                                   // load data in the register
     c18:	8d e0       	ldi	r24, 0x0D	; 13
     c1a:	8c b9       	out	0x0c, r24	; 12
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	97 e2       	ldi	r25, 0x27	; 39
     c20:	29 e1       	ldi	r18, 0x19	; 25
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <sendMSG+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	d9 f7       	brne	.-10     	; 0xc24 <sendMSG+0x4e>
	 Lcd4_Write_String("Setting UART....");
	 uart_init();
	 uart_transmit_string("AT+CMGF=1");
	 uart_transmit_char((char)13);
	 _delay_ms(1000);
	 uart_transmit_string("AT+CMGS=\"+94718724671\"\r");
     c2e:	8d e9       	ldi	r24, 0x9D	; 157
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uart_transmit_string>
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	97 e2       	ldi	r25, 0x27	; 39
     c3a:	29 e1       	ldi	r18, 0x19	; 25
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	f9 01       	movw	r30, r18
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <sendMSG+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	d9 f7       	brne	.-10     	; 0xc3e <sendMSG+0x68>
	 _delay_ms(1000);
	 uart_transmit_string("Aleart from MEDIC BOX");
     c48:	85 eb       	ldi	r24, 0xB5	; 181
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uart_transmit_string>
     c50:	80 e1       	ldi	r24, 0x10	; 16
     c52:	97 e2       	ldi	r25, 0x27	; 39
     c54:	29 e1       	ldi	r18, 0x19	; 25
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f9 01       	movw	r30, r18
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <sendMSG+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c60:	d9 f7       	brne	.-10     	; 0xc58 <sendMSG+0x82>
	UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
	UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
}
void uart_transmit_char (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
     c62:	5d 9b       	sbis	0x0b, 5	; 11
     c64:	fe cf       	rjmp	.-4      	; 0xc62 <sendMSG+0x8c>
	UDR = data;                                   // load data in the register
     c66:	8a e1       	ldi	r24, 0x1A	; 26
     c68:	8c b9       	out	0x0c, r24	; 12
     c6a:	80 e1       	ldi	r24, 0x10	; 16
     c6c:	97 e2       	ldi	r25, 0x27	; 39
     c6e:	29 e1       	ldi	r18, 0x19	; 25
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	f9 01       	movw	r30, r18
     c74:	31 97       	sbiw	r30, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <sendMSG+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <sendMSG+0x9c>
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	97 e2       	ldi	r25, 0x27	; 39
     c80:	29 e1       	ldi	r18, 0x19	; 25
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	f9 01       	movw	r30, r18
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <sendMSG+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8c:	d9 f7       	brne	.-10     	; 0xc84 <sendMSG+0xae>
     c8e:	80 e1       	ldi	r24, 0x10	; 16
     c90:	97 e2       	ldi	r25, 0x27	; 39
     c92:	29 e1       	ldi	r18, 0x19	; 25
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	f9 01       	movw	r30, r18
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <sendMSG+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9e:	d9 f7       	brne	.-10     	; 0xc96 <sendMSG+0xc0>
	 _delay_ms(1000);
	 uart_transmit_char((char)26);
	 _delay_ms(1000);
	 _delay_ms(1000);
	 _delay_ms(1000);
	 Lcd4_Clear();
     ca0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	

}
     ca4:	08 95       	ret

00000ca6 <led>:
void led(int med){

switch(med){
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <led+0x8>
     cac:	76 c0       	rjmp	.+236    	; 0xd9a <led+0xf4>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	91 05       	cpc	r25, r1
     cb2:	3c f4       	brge	.+14     	; 0xcc2 <led+0x1c>
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	91 05       	cpc	r25, r1
     cb8:	81 f0       	breq	.+32     	; 0xcda <led+0x34>
     cba:	02 97       	sbiw	r24, 0x02	; 2
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <led+0x1a>
     cbe:	2d c1       	rjmp	.+602    	; 0xf1a <led+0x274>
     cc0:	3c c0       	rjmp	.+120    	; 0xd3a <led+0x94>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <led+0x24>
     cc8:	c8 c0       	rjmp	.+400    	; 0xe5a <led+0x1b4>
     cca:	85 30       	cpi	r24, 0x05	; 5
     ccc:	91 05       	cpc	r25, r1
     cce:	0c f4       	brge	.+2      	; 0xcd2 <led+0x2c>
     cd0:	94 c0       	rjmp	.+296    	; 0xdfa <led+0x154>
     cd2:	06 97       	sbiw	r24, 0x06	; 6
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <led+0x32>
     cd6:	21 c1       	rjmp	.+578    	; 0xf1a <led+0x274>
     cd8:	f0 c0       	rjmp	.+480    	; 0xeba <led+0x214>

case 1:
			PORTA=0b00000001;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	8b bb       	out	0x1b, r24	; 27
     cde:	80 e1       	ldi	r24, 0x10	; 16
     ce0:	97 e2       	ldi	r25, 0x27	; 39
     ce2:	29 e1       	ldi	r18, 0x19	; 25
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	f9 01       	movw	r30, r18
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <led+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cee:	d9 f7       	brne	.-10     	; 0xce6 <led+0x40>
     cf0:	80 e1       	ldi	r24, 0x10	; 16
     cf2:	97 e2       	ldi	r25, 0x27	; 39
     cf4:	29 e1       	ldi	r18, 0x19	; 25
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	f9 01       	movw	r30, r18
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <led+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d00:	d9 f7       	brne	.-10     	; 0xcf8 <led+0x52>
     d02:	80 e1       	ldi	r24, 0x10	; 16
     d04:	97 e2       	ldi	r25, 0x27	; 39
     d06:	29 e1       	ldi	r18, 0x19	; 25
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <led+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d10:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d12:	d9 f7       	brne	.-10     	; 0xd0a <led+0x64>
     d14:	80 e1       	ldi	r24, 0x10	; 16
     d16:	97 e2       	ldi	r25, 0x27	; 39
     d18:	29 e1       	ldi	r18, 0x19	; 25
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	f9 01       	movw	r30, r18
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <led+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d24:	d9 f7       	brne	.-10     	; 0xd1c <led+0x76>
     d26:	80 e1       	ldi	r24, 0x10	; 16
     d28:	97 e2       	ldi	r25, 0x27	; 39
     d2a:	29 e1       	ldi	r18, 0x19	; 25
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	f9 01       	movw	r30, r18
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <led+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d36:	d9 f7       	brne	.-10     	; 0xd2e <led+0x88>
     d38:	1f c1       	rjmp	.+574    	; 0xf78 <led+0x2d2>
			_delay_ms(1000);
			PORTA=0b01111111;
			break;

case 2:
			PORTA=0b00000010;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	8b bb       	out	0x1b, r24	; 27
     d3e:	80 e1       	ldi	r24, 0x10	; 16
     d40:	97 e2       	ldi	r25, 0x27	; 39
     d42:	29 e1       	ldi	r18, 0x19	; 25
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	f9 01       	movw	r30, r18
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <led+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4e:	d9 f7       	brne	.-10     	; 0xd46 <led+0xa0>
     d50:	80 e1       	ldi	r24, 0x10	; 16
     d52:	97 e2       	ldi	r25, 0x27	; 39
     d54:	29 e1       	ldi	r18, 0x19	; 25
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	f9 01       	movw	r30, r18
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <led+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	d9 f7       	brne	.-10     	; 0xd58 <led+0xb2>
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	97 e2       	ldi	r25, 0x27	; 39
     d66:	29 e1       	ldi	r18, 0x19	; 25
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	31 97       	sbiw	r30, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <led+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d72:	d9 f7       	brne	.-10     	; 0xd6a <led+0xc4>
     d74:	80 e1       	ldi	r24, 0x10	; 16
     d76:	97 e2       	ldi	r25, 0x27	; 39
     d78:	29 e1       	ldi	r18, 0x19	; 25
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	f9 01       	movw	r30, r18
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <led+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d84:	d9 f7       	brne	.-10     	; 0xd7c <led+0xd6>
     d86:	80 e1       	ldi	r24, 0x10	; 16
     d88:	97 e2       	ldi	r25, 0x27	; 39
     d8a:	29 e1       	ldi	r18, 0x19	; 25
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <led+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	d9 f7       	brne	.-10     	; 0xd8e <led+0xe8>
     d98:	ef c0       	rjmp	.+478    	; 0xf78 <led+0x2d2>
			_delay_ms(1000);
			PORTA=0b01111111;
			break;
			
case 3:
			PORTA=0b00000100;
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8b bb       	out	0x1b, r24	; 27
     d9e:	80 e1       	ldi	r24, 0x10	; 16
     da0:	97 e2       	ldi	r25, 0x27	; 39
     da2:	29 e1       	ldi	r18, 0x19	; 25
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	f9 01       	movw	r30, r18
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <led+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dae:	d9 f7       	brne	.-10     	; 0xda6 <led+0x100>
     db0:	80 e1       	ldi	r24, 0x10	; 16
     db2:	97 e2       	ldi	r25, 0x27	; 39
     db4:	29 e1       	ldi	r18, 0x19	; 25
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	f9 01       	movw	r30, r18
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <led+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <led+0x112>
     dc2:	80 e1       	ldi	r24, 0x10	; 16
     dc4:	97 e2       	ldi	r25, 0x27	; 39
     dc6:	29 e1       	ldi	r18, 0x19	; 25
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	f9 01       	movw	r30, r18
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <led+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd2:	d9 f7       	brne	.-10     	; 0xdca <led+0x124>
     dd4:	80 e1       	ldi	r24, 0x10	; 16
     dd6:	97 e2       	ldi	r25, 0x27	; 39
     dd8:	29 e1       	ldi	r18, 0x19	; 25
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <led+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de4:	d9 f7       	brne	.-10     	; 0xddc <led+0x136>
     de6:	80 e1       	ldi	r24, 0x10	; 16
     de8:	97 e2       	ldi	r25, 0x27	; 39
     dea:	29 e1       	ldi	r18, 0x19	; 25
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	f9 01       	movw	r30, r18
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <led+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	d9 f7       	brne	.-10     	; 0xdee <led+0x148>
     df8:	bf c0       	rjmp	.+382    	; 0xf78 <led+0x2d2>
			_delay_ms(1000);
			PORTA=0b01111111;
			break;

case 4:
			PORTA=0b00001000;
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	8b bb       	out	0x1b, r24	; 27
     dfe:	80 e1       	ldi	r24, 0x10	; 16
     e00:	97 e2       	ldi	r25, 0x27	; 39
     e02:	29 e1       	ldi	r18, 0x19	; 25
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	f9 01       	movw	r30, r18
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <led+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	d9 f7       	brne	.-10     	; 0xe06 <led+0x160>
     e10:	80 e1       	ldi	r24, 0x10	; 16
     e12:	97 e2       	ldi	r25, 0x27	; 39
     e14:	29 e1       	ldi	r18, 0x19	; 25
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <led+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e20:	d9 f7       	brne	.-10     	; 0xe18 <led+0x172>
     e22:	80 e1       	ldi	r24, 0x10	; 16
     e24:	97 e2       	ldi	r25, 0x27	; 39
     e26:	29 e1       	ldi	r18, 0x19	; 25
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	f9 01       	movw	r30, r18
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <led+0x186>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	d9 f7       	brne	.-10     	; 0xe2a <led+0x184>
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	97 e2       	ldi	r25, 0x27	; 39
     e38:	29 e1       	ldi	r18, 0x19	; 25
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	f9 01       	movw	r30, r18
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <led+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	d9 f7       	brne	.-10     	; 0xe3c <led+0x196>
     e46:	80 e1       	ldi	r24, 0x10	; 16
     e48:	97 e2       	ldi	r25, 0x27	; 39
     e4a:	29 e1       	ldi	r18, 0x19	; 25
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	f9 01       	movw	r30, r18
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <led+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	d9 f7       	brne	.-10     	; 0xe4e <led+0x1a8>
     e58:	8f c0       	rjmp	.+286    	; 0xf78 <led+0x2d2>
			_delay_ms(1000);
			PORTA=0b01111111;
			break;

case 5:
			PORTA=0b00010000;
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	8b bb       	out	0x1b, r24	; 27
     e5e:	80 e1       	ldi	r24, 0x10	; 16
     e60:	97 e2       	ldi	r25, 0x27	; 39
     e62:	29 e1       	ldi	r18, 0x19	; 25
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <led+0x1c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	d9 f7       	brne	.-10     	; 0xe66 <led+0x1c0>
     e70:	80 e1       	ldi	r24, 0x10	; 16
     e72:	97 e2       	ldi	r25, 0x27	; 39
     e74:	29 e1       	ldi	r18, 0x19	; 25
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	f9 01       	movw	r30, r18
     e7a:	31 97       	sbiw	r30, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <led+0x1d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e80:	d9 f7       	brne	.-10     	; 0xe78 <led+0x1d2>
     e82:	80 e1       	ldi	r24, 0x10	; 16
     e84:	97 e2       	ldi	r25, 0x27	; 39
     e86:	29 e1       	ldi	r18, 0x19	; 25
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <led+0x1e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e92:	d9 f7       	brne	.-10     	; 0xe8a <led+0x1e4>
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	97 e2       	ldi	r25, 0x27	; 39
     e98:	29 e1       	ldi	r18, 0x19	; 25
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	f9 01       	movw	r30, r18
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <led+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <led+0x1f6>
     ea6:	80 e1       	ldi	r24, 0x10	; 16
     ea8:	97 e2       	ldi	r25, 0x27	; 39
     eaa:	29 e1       	ldi	r18, 0x19	; 25
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	f9 01       	movw	r30, r18
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <led+0x20a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	d9 f7       	brne	.-10     	; 0xeae <led+0x208>
     eb8:	5f c0       	rjmp	.+190    	; 0xf78 <led+0x2d2>
			_delay_ms(1000);
			PORTA=0b01111111;
			break;

case 6:
			PORTA=0b00100000;
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	8b bb       	out	0x1b, r24	; 27
     ebe:	80 e1       	ldi	r24, 0x10	; 16
     ec0:	97 e2       	ldi	r25, 0x27	; 39
     ec2:	29 e1       	ldi	r18, 0x19	; 25
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	31 97       	sbiw	r30, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <led+0x222>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ece:	d9 f7       	brne	.-10     	; 0xec6 <led+0x220>
     ed0:	80 e1       	ldi	r24, 0x10	; 16
     ed2:	97 e2       	ldi	r25, 0x27	; 39
     ed4:	29 e1       	ldi	r18, 0x19	; 25
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	f9 01       	movw	r30, r18
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <led+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	d9 f7       	brne	.-10     	; 0xed8 <led+0x232>
     ee2:	80 e1       	ldi	r24, 0x10	; 16
     ee4:	97 e2       	ldi	r25, 0x27	; 39
     ee6:	29 e1       	ldi	r18, 0x19	; 25
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	f9 01       	movw	r30, r18
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <led+0x246>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef2:	d9 f7       	brne	.-10     	; 0xeea <led+0x244>
     ef4:	80 e1       	ldi	r24, 0x10	; 16
     ef6:	97 e2       	ldi	r25, 0x27	; 39
     ef8:	29 e1       	ldi	r18, 0x19	; 25
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	f9 01       	movw	r30, r18
     efe:	31 97       	sbiw	r30, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <led+0x258>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	d9 f7       	brne	.-10     	; 0xefc <led+0x256>
     f06:	80 e1       	ldi	r24, 0x10	; 16
     f08:	97 e2       	ldi	r25, 0x27	; 39
     f0a:	29 e1       	ldi	r18, 0x19	; 25
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	f9 01       	movw	r30, r18
     f10:	31 97       	sbiw	r30, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <led+0x26a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f16:	d9 f7       	brne	.-10     	; 0xf0e <led+0x268>
     f18:	2f c0       	rjmp	.+94     	; 0xf78 <led+0x2d2>
			_delay_ms(1000);
			PORTA=0b01111111;
			break;

default:
			PORTA=0b01000000;
     f1a:	80 e4       	ldi	r24, 0x40	; 64
     f1c:	8b bb       	out	0x1b, r24	; 27
     f1e:	80 e1       	ldi	r24, 0x10	; 16
     f20:	97 e2       	ldi	r25, 0x27	; 39
     f22:	29 e1       	ldi	r18, 0x19	; 25
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	f9 01       	movw	r30, r18
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <led+0x282>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2e:	d9 f7       	brne	.-10     	; 0xf26 <led+0x280>
     f30:	80 e1       	ldi	r24, 0x10	; 16
     f32:	97 e2       	ldi	r25, 0x27	; 39
     f34:	29 e1       	ldi	r18, 0x19	; 25
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	31 97       	sbiw	r30, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <led+0x294>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f40:	d9 f7       	brne	.-10     	; 0xf38 <led+0x292>
     f42:	80 e1       	ldi	r24, 0x10	; 16
     f44:	97 e2       	ldi	r25, 0x27	; 39
     f46:	29 e1       	ldi	r18, 0x19	; 25
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	f9 01       	movw	r30, r18
     f4c:	31 97       	sbiw	r30, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <led+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	d9 f7       	brne	.-10     	; 0xf4a <led+0x2a4>
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	97 e2       	ldi	r25, 0x27	; 39
     f58:	29 e1       	ldi	r18, 0x19	; 25
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	f9 01       	movw	r30, r18
     f5e:	31 97       	sbiw	r30, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <led+0x2b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f64:	d9 f7       	brne	.-10     	; 0xf5c <led+0x2b6>
     f66:	80 e1       	ldi	r24, 0x10	; 16
     f68:	97 e2       	ldi	r25, 0x27	; 39
     f6a:	29 e1       	ldi	r18, 0x19	; 25
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	f9 01       	movw	r30, r18
     f70:	31 97       	sbiw	r30, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <led+0x2ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f76:	d9 f7       	brne	.-10     	; 0xf6e <led+0x2c8>
			_delay_ms(1000);
			_delay_ms(1000);
			_delay_ms(1000);
			_delay_ms(1000);
			_delay_ms(1000);
			PORTA=0b01111111;
     f78:	8f e7       	ldi	r24, 0x7F	; 127
     f7a:	8b bb       	out	0x1b, r24	; 27
     f7c:	08 95       	ret

00000f7e <ongoing>:
	 Lcd4_Write_String(s1);
	_delay_ms(1000);
	 Lcd4_Clear();
}

      void ongoing(int arra){
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
	   l = 60 * arra;
     f86:	2c e3       	ldi	r18, 0x3C	; 60
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ac 01       	movw	r20, r24
     f8c:	42 9f       	mul	r20, r18
     f8e:	c0 01       	movw	r24, r0
     f90:	43 9f       	mul	r20, r19
     f92:	90 0d       	add	r25, r0
     f94:	52 9f       	mul	r21, r18
     f96:	90 0d       	add	r25, r0
     f98:	11 24       	eor	r1, r1
     f9a:	90 93 e6 01 	sts	0x01E6, r25
     f9e:	80 93 e5 01 	sts	0x01E5, r24
	 		Lcd4_Set_Cursor(1,2);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("MATRIX MEDICS");
     faa:	8b ec       	ldi	r24, 0xCB	; 203
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	  
	  for( k=0 ; k<l ; k++){
     fb2:	10 92 e8 01 	sts	0x01E8, r1
     fb6:	10 92 e7 01 	sts	0x01E7, r1
     fba:	09 e1       	ldi	r16, 0x19	; 25
     fbc:	10 e0       	ldi	r17, 0x00	; 0

			Lcd4_Set_Cursor(1,0);
     fbe:	c0 e5       	ldi	r28, 0x50	; 80
     fc0:	d3 ec       	ldi	r29, 0xC3	; 195
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <ongoing+0x7c>
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Shift_Right();
     fcc:	0e 94 86 03 	call	0x70c	; 0x70c <Lcd4_Shift_Right>
				
	
			//_delay_ms(1000);
			//DDRD=0b1100000;
			PORTC|=1<<PINC1;
     fd0:	a9 9a       	sbi	0x15, 1	; 21
     fd2:	80 e4       	ldi	r24, 0x40	; 64
     fd4:	9f e1       	ldi	r25, 0x1F	; 31
     fd6:	f8 01       	movw	r30, r16
     fd8:	31 97       	sbiw	r30, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <ongoing+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fdc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fde:	d9 f7       	brne	.-10     	; 0xfd6 <ongoing+0x58>
			//PORTA=0b10000001;
			_delay_ms(800);
			PORTC&=~(1<<PINC1);
     fe0:	a9 98       	cbi	0x15, 1	; 21
     fe2:	ce 01       	movw	r24, r28
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <ongoing+0x66>
      void ongoing(int arra){
	   l = 60 * arra;
	 		Lcd4_Set_Cursor(1,2);
			Lcd4_Write_String("MATRIX MEDICS");
	  
	  for( k=0 ; k<l ; k++){
     fe8:	80 91 e7 01 	lds	r24, 0x01E7
     fec:	90 91 e8 01 	lds	r25, 0x01E8
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	90 93 e8 01 	sts	0x01E8, r25
     ff6:	80 93 e7 01 	sts	0x01E7, r24
     ffa:	20 91 e7 01 	lds	r18, 0x01E7
     ffe:	30 91 e8 01 	lds	r19, 0x01E8
    1002:	80 91 e5 01 	lds	r24, 0x01E5
    1006:	90 91 e6 01 	lds	r25, 0x01E6
    100a:	28 17       	cp	r18, r24
    100c:	39 07       	cpc	r19, r25
    100e:	d4 f2       	brlt	.-76     	; 0xfc4 <ongoing+0x46>
			PORTC&=~(1<<PINC1);
			//PORTC=0b00000000;
			_delay_ms(200);
	  }
	  
	  		Lcd4_Clear();
    1010:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,2);
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	62 e0       	ldi	r22, 0x02	; 2
    1018:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("IT'S TIME TO");
    101c:	89 ed       	ldi	r24, 0xD9	; 217
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,2);
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("GET MEDICINE");
    102c:	86 ee       	ldi	r24, 0xE6	; 230
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
			PORTC|=1<<PINC0;
    1034:	a8 9a       	sbi	0x15, 0	; 21
    1036:	80 e1       	ldi	r24, 0x10	; 16
    1038:	97 e2       	ldi	r25, 0x27	; 39
    103a:	29 e1       	ldi	r18, 0x19	; 25
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	f9 01       	movw	r30, r18
    1040:	31 97       	sbiw	r30, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <ongoing+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1046:	d9 f7       	brne	.-10     	; 0x103e <ongoing+0xc0>
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	97 e2       	ldi	r25, 0x27	; 39
    104c:	29 e1       	ldi	r18, 0x19	; 25
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	f9 01       	movw	r30, r18
    1052:	31 97       	sbiw	r30, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <ongoing+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	d9 f7       	brne	.-10     	; 0x1050 <ongoing+0xd2>
			_delay_ms(1000);
			_delay_ms(1000);
			PORTC&=~(1<<PINC0);
    105a:	a8 98       	cbi	0x15, 0	; 21
			sendMSG();
    105c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sendMSG>
			led(med);
    1060:	80 91 0e 02 	lds	r24, 0x020E
    1064:	90 91 0f 02 	lds	r25, 0x020F
    1068:	0e 94 53 06 	call	0xca6	; 0xca6 <led>
				
	  
}  
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <medic_details>:
	raw=2;
	place=2;
}

void medic_details(){
	Lcd4_Set_Cursor(1,2);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Please! Enter ");
    107e:	83 ef       	ldi	r24, 0xF3	; 243
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	62 e0       	ldi	r22, 0x02	; 2
    108a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Medic Details");
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1096:	80 e1       	ldi	r24, 0x10	; 16
    1098:	97 e2       	ldi	r25, 0x27	; 39
    109a:	29 e1       	ldi	r18, 0x19	; 25
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	f9 01       	movw	r30, r18
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <medic_details+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	d9 f7       	brne	.-10     	; 0x109e <medic_details+0x28>
	_delay_ms(1000);

	Lcd4_Clear();
    10a8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	62 e0       	ldi	r22, 0x02	; 2
    10b0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Medication:");
    10b4:	80 e1       	ldi	r24, 0x10	; 16
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	keypad();
    10c4:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	get_value();
    10c8:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	itoa(*new_num,s1,10);
    10cc:	e0 91 ff 01 	lds	r30, 0x01FF
    10d0:	f0 91 00 02 	lds	r31, 0x0200
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	68 ef       	ldi	r22, 0xF8	; 248
    10da:	71 e0       	ldi	r23, 0x01	; 1
    10dc:	4a e0       	ldi	r20, 0x0A	; 10
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
    med=num[1];
    10e4:	80 91 03 02 	lds	r24, 0x0203
    10e8:	90 91 04 02 	lds	r25, 0x0204
    10ec:	90 93 0f 02 	sts	0x020F, r25
    10f0:	80 93 0e 02 	sts	0x020E, r24
	 
	 Lcd4_Clear();
    10f4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Write_String("you entered:");
    10f8:	8c e1       	ldi	r24, 0x1C	; 28
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	 Lcd4_Write_String(s1);
    1100:	88 ef       	ldi	r24, 0xF8	; 248
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1108:	80 e1       	ldi	r24, 0x10	; 16
    110a:	97 e2       	ldi	r25, 0x27	; 39
    110c:	29 e1       	ldi	r18, 0x19	; 25
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	f9 01       	movw	r30, r18
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <medic_details+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1118:	d9 f7       	brne	.-10     	; 0x1110 <medic_details+0x9a>
	_delay_ms(1000);
	
	Lcd4_Clear();
    111a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	62 e0       	ldi	r22, 0x02	; 2
    1122:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Hourly For ");
    1126:	89 e2       	ldi	r24, 0x29	; 41
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
    keypad();
    1136:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	get_value();
    113a:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	itoa(*new_num,s1,10);
    113e:	e0 91 ff 01 	lds	r30, 0x01FF
    1142:	f0 91 00 02 	lds	r31, 0x0200
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	68 ef       	ldi	r22, 0xF8	; 248
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	4a e0       	ldi	r20, 0x0A	; 10
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
    arra=num[1];
    1156:	80 91 03 02 	lds	r24, 0x0203
    115a:	90 91 04 02 	lds	r25, 0x0204
    115e:	90 93 11 02 	sts	0x0211, r25
    1162:	80 93 10 02 	sts	0x0210, r24
	Lcd4_Clear();
    1166:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Write_String("you entered:");
    116a:	8c e1       	ldi	r24, 0x1C	; 28
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Write_String(s1);
    1172:	88 ef       	ldi	r24, 0xF8	; 248
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    117a:	80 e1       	ldi	r24, 0x10	; 16
    117c:	97 e2       	ldi	r25, 0x27	; 39
    117e:	29 e1       	ldi	r18, 0x19	; 25
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	f9 01       	movw	r30, r18
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <medic_details+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118a:	d9 f7       	brne	.-10     	; 0x1182 <medic_details+0x10c>
	_delay_ms(1000);
	
	Lcd4_Clear();
    118c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	62 e0       	ldi	r22, 0x02	; 2
    1194:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Days ");
    1198:	85 e3       	ldi	r24, 0x35	; 53
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
    keypad();
    11a8:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	 get_value();
    11ac:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	 itoa(*new_num,s1,10);
    11b0:	e0 91 ff 01 	lds	r30, 0x01FF
    11b4:	f0 91 00 02 	lds	r31, 0x0200
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	68 ef       	ldi	r22, 0xF8	; 248
    11be:	71 e0       	ldi	r23, 0x01	; 1
    11c0:	4a e0       	ldi	r20, 0x0A	; 10
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	 Lcd4_Clear();
    11c8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Write_String("you entered:");
    11cc:	8c e1       	ldi	r24, 0x1C	; 28
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	 Lcd4_Write_String(s1);
    11d4:	88 ef       	ldi	r24, 0xF8	; 248
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    11dc:	80 e1       	ldi	r24, 0x10	; 16
    11de:	97 e2       	ldi	r25, 0x27	; 39
    11e0:	29 e1       	ldi	r18, 0x19	; 25
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <medic_details+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	d9 f7       	brne	.-10     	; 0x11e4 <medic_details+0x16e>
	_delay_ms(1000);
	
	Lcd4_Clear();
    11ee:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	62 e0       	ldi	r22, 0x02	; 2
    11f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Time Interval ");
    11fa:	8b e3       	ldi	r24, 0x3B	; 59
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	62 e0       	ldi	r22, 0x02	; 2
    1206:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	keypad();
    120a:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	 get_value();
    120e:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	 itoa(*new_num,s1,10);
    1212:	e0 91 ff 01 	lds	r30, 0x01FF
    1216:	f0 91 00 02 	lds	r31, 0x0200
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	68 ef       	ldi	r22, 0xF8	; 248
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	4a e0       	ldi	r20, 0x0A	; 10
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	 Lcd4_Clear();
    122a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Write_String("you entered:");
    122e:	8c e1       	ldi	r24, 0x1C	; 28
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	 Lcd4_Write_String(s1);
    1236:	88 ef       	ldi	r24, 0xF8	; 248
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    123e:	80 e1       	ldi	r24, 0x10	; 16
    1240:	97 e2       	ldi	r25, 0x27	; 39
    1242:	29 e1       	ldi	r18, 0x19	; 25
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	f9 01       	movw	r30, r18
    1248:	31 97       	sbiw	r30, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <medic_details+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124e:	d9 f7       	brne	.-10     	; 0x1246 <medic_details+0x1d0>
	_delay_ms(1000);
	
	Lcd4_Clear();
    1250:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	62 e0       	ldi	r22, 0x02	; 2
    1258:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Dose");
    125c:	8a e4       	ldi	r24, 0x4A	; 74
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	62 e0       	ldi	r22, 0x02	; 2
    1268:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	keypad();
    126c:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	 get_value();
    1270:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	 itoa(*new_num,s1,10);
    1274:	e0 91 ff 01 	lds	r30, 0x01FF
    1278:	f0 91 00 02 	lds	r31, 0x0200
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	68 ef       	ldi	r22, 0xF8	; 248
    1282:	71 e0       	ldi	r23, 0x01	; 1
    1284:	4a e0       	ldi	r20, 0x0A	; 10
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	 Lcd4_Clear();
    128c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Write_String("you entered:");
    1290:	8c e1       	ldi	r24, 0x1C	; 28
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	 Lcd4_Write_String(s1);
    1298:	88 ef       	ldi	r24, 0xF8	; 248
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    12a0:	80 e1       	ldi	r24, 0x10	; 16
    12a2:	97 e2       	ldi	r25, 0x27	; 39
    12a4:	29 e1       	ldi	r18, 0x19	; 25
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	f9 01       	movw	r30, r18
    12aa:	31 97       	sbiw	r30, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <medic_details+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	d9 f7       	brne	.-10     	; 0x12a8 <medic_details+0x232>
	_delay_ms(1000);
	
	Lcd4_Clear();
    12b2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	62 e0       	ldi	r22, 0x02	; 2
    12ba:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("BM=01/AM=02");
    12be:	8f e4       	ldi	r24, 0x4F	; 79
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	62 e0       	ldi	r22, 0x02	; 2
    12ca:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	keypad();
    12ce:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	 get_value();
    12d2:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	 itoa(*new_num,s1,10);
    12d6:	e0 91 ff 01 	lds	r30, 0x01FF
    12da:	f0 91 00 02 	lds	r31, 0x0200
    12de:	80 81       	ld	r24, Z
    12e0:	91 81       	ldd	r25, Z+1	; 0x01
    12e2:	68 ef       	ldi	r22, 0xF8	; 248
    12e4:	71 e0       	ldi	r23, 0x01	; 1
    12e6:	4a e0       	ldi	r20, 0x0A	; 10
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	 Lcd4_Clear();
    12ee:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	 Lcd4_Write_String("you entered:");
    12f2:	8c e1       	ldi	r24, 0x1C	; 28
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	 Lcd4_Write_String(s1);
    12fa:	88 ef       	ldi	r24, 0xF8	; 248
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1302:	80 e1       	ldi	r24, 0x10	; 16
    1304:	97 e2       	ldi	r25, 0x27	; 39
    1306:	29 e1       	ldi	r18, 0x19	; 25
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	f9 01       	movw	r30, r18
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <medic_details+0x296>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	d9 f7       	brne	.-10     	; 0x130a <medic_details+0x294>
	_delay_ms(1000);
	 Lcd4_Clear();
    1314:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
}
    1318:	08 95       	ret

0000131a <main>:
 void led(int med);
 void sendMSG();


int main(void)
{
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
	DDRD = 0xFF;
    132a:	9f ef       	ldi	r25, 0xFF	; 255
    132c:	91 bb       	out	0x11, r25	; 17
	DDRA = 0xFF;
    132e:	9a bb       	out	0x1a, r25	; 26
	DDRB = 0x0F;
    1330:	8f e0       	ldi	r24, 0x0F	; 15
    1332:	87 bb       	out	0x17, r24	; 23
	PORTD=0xFF;
    1334:	92 bb       	out	0x12, r25	; 18
	DDRC = 0xFF;
    1336:	94 bb       	out	0x14, r25	; 20
	PORTA=0xFF;
    1338:	9b bb       	out	0x1b, r25	; 27

    
    
    

	Lcd4_Init();
    133a:	0e 94 0f 03 	call	0x61e	; 0x61e <Lcd4_Init>
	Lcd4_Clear();
    133e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Metrix Medics ");
    134a:	8b e5       	ldi	r24, 0x5B	; 91
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1352:	88 ea       	ldi	r24, 0xA8	; 168
    1354:	91 e6       	ldi	r25, 0x61	; 97
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <main+0x3c>
	_delay_ms(100);
	Lcd4_Set_Cursor(2,5);
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	65 e0       	ldi	r22, 0x05	; 5
    135e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("BOX");
    1362:	8a e6       	ldi	r24, 0x6A	; 106
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	97 e2       	ldi	r25, 0x27	; 39
    136e:	29 e1       	ldi	r18, 0x19	; 25
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <main+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	d9 f7       	brne	.-10     	; 0x1372 <main+0x58>
    137c:	80 e1       	ldi	r24, 0x10	; 16
    137e:	97 e2       	ldi	r25, 0x27	; 39
    1380:	29 e1       	ldi	r18, 0x19	; 25
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	31 97       	sbiw	r30, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	d9 f7       	brne	.-10     	; 0x1384 <main+0x6a>
    138e:	09 e1       	ldi	r16, 0x19	; 25
    1390:	10 e0       	ldi	r17, 0x00	; 0
	
	keypad();
	_delay_ms(100);
	lop = num[0];
	  x=0;
	  raw=2;
    1392:	e8 ea       	ldi	r30, 0xA8	; 168
    1394:	ee 2e       	mov	r14, r30
    1396:	e1 e6       	ldi	r30, 0x61	; 97
    1398:	fe 2e       	mov	r15, r30
    139a:	72 e0       	ldi	r23, 0x02	; 2
    139c:	c7 2e       	mov	r12, r23
    139e:	d1 2c       	mov	r13, r1
	
	while(1)
	
	{ 
	
	Lcd4_Clear();
    13a0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Let's Enter ");
    13ac:	8e e6       	ldi	r24, 0x6E	; 110
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	62 e0       	ldi	r22, 0x02	; 2
    13b8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Medic Details");
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    13c4:	80 e1       	ldi	r24, 0x10	; 16
    13c6:	97 e2       	ldi	r25, 0x27	; 39
    13c8:	f8 01       	movw	r30, r16
    13ca:	31 97       	sbiw	r30, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	d9 f7       	brne	.-10     	; 0x13c8 <main+0xae>
    13d2:	80 e1       	ldi	r24, 0x10	; 16
    13d4:	97 e2       	ldi	r25, 0x27	; 39
    13d6:	f8 01       	movw	r30, r16
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	d9 f7       	brne	.-10     	; 0x13d6 <main+0xbc>
	_delay_ms(1000);
	_delay_ms(1000);
	
	Lcd4_Clear();
    13e0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("YES-01NO-Other");
    13ec:	8b e7       	ldi	r24, 0x7B	; 123
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
    13fc:	80 e1       	ldi	r24, 0x10	; 16
    13fe:	97 e2       	ldi	r25, 0x27	; 39
    1400:	f8 01       	movw	r30, r16
    1402:	31 97       	sbiw	r30, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <main+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	d9 f7       	brne	.-10     	; 0x1400 <main+0xe6>
    140a:	80 e1       	ldi	r24, 0x10	; 16
    140c:	97 e2       	ldi	r25, 0x27	; 39
    140e:	f8 01       	movw	r30, r16
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1414:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1416:	d9 f7       	brne	.-10     	; 0x140e <main+0xf4>
	_delay_ms(1000);
	_delay_ms(1000);
	keypad();
    1418:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	get_value();
    141c:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	itoa(*new_num,s1,10);
    1420:	e0 91 ff 01 	lds	r30, 0x01FF
    1424:	f0 91 00 02 	lds	r31, 0x0200
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	68 ef       	ldi	r22, 0xF8	; 248
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	4a e0       	ldi	r20, 0x0A	; 10
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	Lcd4_Clear();
    1438:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	
	
	
	if(*new_num==01){
    143c:	e0 91 ff 01 	lds	r30, 0x01FF
    1440:	f0 91 00 02 	lds	r31, 0x0200
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	09 f0       	breq	.+2      	; 0x144e <main+0x134>
    144c:	a5 c0       	rjmp	.+330    	; 0x1598 <main+0x27e>
	
	Lcd4_Set_Cursor(1,2);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("HOW MANY MEDICS ");
    1456:	8a e8       	ldi	r24, 0x8A	; 138
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("DO YOU HAVE");
    1466:	8b e9       	ldi	r24, 0x9B	; 155
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	97 e2       	ldi	r25, 0x27	; 39
    1472:	f8 01       	movw	r30, r16
    1474:	31 97       	sbiw	r30, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <main+0x15a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1478:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	d9 f7       	brne	.-10     	; 0x1472 <main+0x158>
	_delay_ms(1000);
	Lcd4_Clear();
    147c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	
	Lcd4_Set_Cursor(1,2);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	keypad();
    1488:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
	get_value();
    148c:	0e 94 92 05 	call	0xb24	; 0xb24 <get_value>
	itoa(*new_num,s1,10);
    1490:	e0 91 ff 01 	lds	r30, 0x01FF
    1494:	f0 91 00 02 	lds	r31, 0x0200
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	68 ef       	ldi	r22, 0xF8	; 248
    149e:	71 e0       	ldi	r23, 0x01	; 1
    14a0:	4a e0       	ldi	r20, 0x0A	; 10
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	Lcd4_Clear();
    14a8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	
	int m= num[1];
    14ac:	c0 91 03 02 	lds	r28, 0x0203
    14b0:	d0 91 04 02 	lds	r29, 0x0204
	
	
	
	for( i=0;i < m ; i++){
    14b4:	10 92 fe 01 	sts	0x01FE, r1
    14b8:	10 92 fd 01 	sts	0x01FD, r1
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4 <main+0x1ba>
	
	medic_details();
    14be:	0e 94 3b 08 	call	0x1076	; 0x1076 <medic_details>
	
	int m= num[1];
	
	
	
	for( i=0;i < m ; i++){
    14c2:	80 91 fd 01 	lds	r24, 0x01FD
    14c6:	90 91 fe 01 	lds	r25, 0x01FE
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	90 93 fe 01 	sts	0x01FE, r25
    14d0:	80 93 fd 01 	sts	0x01FD, r24
    14d4:	80 91 fd 01 	lds	r24, 0x01FD
    14d8:	90 91 fe 01 	lds	r25, 0x01FE
    14dc:	8c 17       	cp	r24, r28
    14de:	9d 07       	cpc	r25, r29
    14e0:	74 f3       	brlt	.-36     	; 0x14be <main+0x1a4>
	medic_details();
	
	}

	
	Lcd4_Clear();
    14e2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,1);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Alerting_System ");
    14ee:	87 ea       	ldi	r24, 0xA7	; 167
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Is_Activated");
    14fe:	88 eb       	ldi	r24, 0xB8	; 184
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1506:	80 e1       	ldi	r24, 0x10	; 16
    1508:	97 e2       	ldi	r25, 0x27	; 39
    150a:	f8 01       	movw	r30, r16
    150c:	31 97       	sbiw	r30, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <main+0x1f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	d9 f7       	brne	.-10     	; 0x150a <main+0x1f0>
	_delay_ms(1000);
	
	Lcd4_Clear();
    1514:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Thank You ");
    1520:	85 ec       	ldi	r24, 0xC5	; 197
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Very Much");
    1530:	80 ed       	ldi	r24, 0xD0	; 208
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1538:	80 e1       	ldi	r24, 0x10	; 16
    153a:	97 e2       	ldi	r25, 0x27	; 39
    153c:	f8 01       	movw	r30, r16
    153e:	31 97       	sbiw	r30, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <main+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1544:	d9 f7       	brne	.-10     	; 0x153c <main+0x222>
	_delay_ms(1000);
	Lcd4_Clear();
    1546:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	
	Lcd4_Clear();
    154a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,2);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	62 e0       	ldi	r22, 0x02	; 2
    1552:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	itoa(arra,new,10);
    1556:	60 91 09 02 	lds	r22, 0x0209
    155a:	80 91 10 02 	lds	r24, 0x0210
    155e:	90 91 11 02 	lds	r25, 0x0211
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	4a e0       	ldi	r20, 0x0A	; 10
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	0e 94 04 0b 	call	0x1608	; 0x1608 <itoa>
	Lcd4_Write_String(new);
    156c:	80 91 09 02 	lds	r24, 0x0209
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    1576:	80 e1       	ldi	r24, 0x10	; 16
    1578:	97 e2       	ldi	r25, 0x27	; 39
    157a:	f8 01       	movw	r30, r16
    157c:	31 97       	sbiw	r30, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <main+0x262>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1580:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	d9 f7       	brne	.-10     	; 0x157a <main+0x260>
	_delay_ms(1000);
	Lcd4_Clear();
    1584:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>

	ongoing(arra);
    1588:	80 91 10 02 	lds	r24, 0x0210
    158c:	90 91 11 02 	lds	r25, 0x0211
    1590:	0e 94 bf 07 	call	0xf7e	; 0xf7e <ongoing>
	
	Lcd4_Clear();
    1594:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>

	}    
	
	else{

	Lcd4_Set_Cursor(1,2);
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	62 e0       	ldi	r22, 0x02	; 2
    159c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Metrix Medics ");
    15a0:	8b e5       	ldi	r24, 0x5B	; 91
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    15a8:	c7 01       	movw	r24, r14
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <main+0x290>
	_delay_ms(100);
	Lcd4_Set_Cursor(2,5);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	65 e0       	ldi	r22, 0x05	; 5
    15b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("BOX");
    15b6:	8a e6       	ldi	r24, 0x6A	; 106
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
    15be:	19 c0       	rjmp	.+50     	; 0x15f2 <main+0x2d8>
	
	
	while(lop < 8)
	{
	
	keypad();
    15c0:	0e 94 94 03 	call	0x728	; 0x728 <keypad>
    15c4:	c7 01       	movw	r24, r14
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <main+0x2ac>
	_delay_ms(100);
	lop = num[0];
    15ca:	80 91 01 02 	lds	r24, 0x0201
    15ce:	90 91 02 02 	lds	r25, 0x0202
    15d2:	90 93 e1 01 	sts	0x01E1, r25
    15d6:	80 93 e0 01 	sts	0x01E0, r24
	  x=0;
    15da:	10 92 e4 01 	sts	0x01E4, r1
    15de:	10 92 e3 01 	sts	0x01E3, r1
	  raw=2;
    15e2:	d0 92 dd 01 	sts	0x01DD, r13
    15e6:	c0 92 dc 01 	sts	0x01DC, r12
	  place=2;
    15ea:	d0 92 db 01 	sts	0x01DB, r13
    15ee:	c0 92 da 01 	sts	0x01DA, r12

	}
	
	
	
	while(lop < 8)
    15f2:	80 91 e0 01 	lds	r24, 0x01E0
    15f6:	90 91 e1 01 	lds	r25, 0x01E1
    15fa:	08 97       	sbiw	r24, 0x08	; 8
    15fc:	0c f3       	brlt	.-62     	; 0x15c0 <main+0x2a6>
	lop = num[0];
	  x=0;
	  raw=2;
	  place=2;
	}
	lop = 0;
    15fe:	10 92 e1 01 	sts	0x01E1, r1
    1602:	10 92 e0 01 	sts	0x01E0, r1
    1606:	cc ce       	rjmp	.-616    	; 0x13a0 <main+0x86>

00001608 <itoa>:
    1608:	fb 01       	movw	r30, r22
    160a:	9f 01       	movw	r18, r30
    160c:	e8 94       	clt
    160e:	42 30       	cpi	r20, 0x02	; 2
    1610:	c4 f0       	brlt	.+48     	; 0x1642 <itoa+0x3a>
    1612:	45 32       	cpi	r20, 0x25	; 37
    1614:	b4 f4       	brge	.+44     	; 0x1642 <itoa+0x3a>
    1616:	4a 30       	cpi	r20, 0x0A	; 10
    1618:	29 f4       	brne	.+10     	; 0x1624 <itoa+0x1c>
    161a:	97 fb       	bst	r25, 7
    161c:	1e f4       	brtc	.+6      	; 0x1624 <itoa+0x1c>
    161e:	90 95       	com	r25
    1620:	81 95       	neg	r24
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	64 2f       	mov	r22, r20
    1626:	77 27       	eor	r23, r23
    1628:	0e 94 35 0b 	call	0x166a	; 0x166a <__udivmodhi4>
    162c:	80 5d       	subi	r24, 0xD0	; 208
    162e:	8a 33       	cpi	r24, 0x3A	; 58
    1630:	0c f0       	brlt	.+2      	; 0x1634 <itoa+0x2c>
    1632:	89 5d       	subi	r24, 0xD9	; 217
    1634:	81 93       	st	Z+, r24
    1636:	cb 01       	movw	r24, r22
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	a1 f7       	brne	.-24     	; 0x1624 <itoa+0x1c>
    163c:	16 f4       	brtc	.+4      	; 0x1642 <itoa+0x3a>
    163e:	5d e2       	ldi	r21, 0x2D	; 45
    1640:	51 93       	st	Z+, r21
    1642:	10 82       	st	Z, r1
    1644:	c9 01       	movw	r24, r18
    1646:	0c 94 25 0b 	jmp	0x164a	; 0x164a <strrev>

0000164a <strrev>:
    164a:	dc 01       	movw	r26, r24
    164c:	fc 01       	movw	r30, r24
    164e:	67 2f       	mov	r22, r23
    1650:	71 91       	ld	r23, Z+
    1652:	77 23       	and	r23, r23
    1654:	e1 f7       	brne	.-8      	; 0x164e <strrev+0x4>
    1656:	32 97       	sbiw	r30, 0x02	; 2
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <strrev+0x18>
    165a:	7c 91       	ld	r23, X
    165c:	6d 93       	st	X+, r22
    165e:	70 83       	st	Z, r23
    1660:	62 91       	ld	r22, -Z
    1662:	ae 17       	cp	r26, r30
    1664:	bf 07       	cpc	r27, r31
    1666:	c8 f3       	brcs	.-14     	; 0x165a <strrev+0x10>
    1668:	08 95       	ret

0000166a <__udivmodhi4>:
    166a:	aa 1b       	sub	r26, r26
    166c:	bb 1b       	sub	r27, r27
    166e:	51 e1       	ldi	r21, 0x11	; 17
    1670:	07 c0       	rjmp	.+14     	; 0x1680 <__udivmodhi4_ep>

00001672 <__udivmodhi4_loop>:
    1672:	aa 1f       	adc	r26, r26
    1674:	bb 1f       	adc	r27, r27
    1676:	a6 17       	cp	r26, r22
    1678:	b7 07       	cpc	r27, r23
    167a:	10 f0       	brcs	.+4      	; 0x1680 <__udivmodhi4_ep>
    167c:	a6 1b       	sub	r26, r22
    167e:	b7 0b       	sbc	r27, r23

00001680 <__udivmodhi4_ep>:
    1680:	88 1f       	adc	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	5a 95       	dec	r21
    1686:	a9 f7       	brne	.-22     	; 0x1672 <__udivmodhi4_loop>
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	08 95       	ret

00001692 <_exit>:
    1692:	f8 94       	cli

00001694 <__stop_program>:
    1694:	ff cf       	rjmp	.-2      	; 0x1694 <__stop_program>
